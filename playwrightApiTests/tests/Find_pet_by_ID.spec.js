// ********RoostGPT********
/*
Test generated by RoostGPT for test roost_test using AI Type Azure Open AI and AI Model gpt-4o-standard

playwright test generated for endpoint: /pet/{petId}, with method: get
RoostTestHash={
  "paramDesc": {
    "petId": "integer"
  },
  "headerDesc": {},
  "reqBodyDesc": {},
  "resBodyDesc": {
    "200": "{\n  \"id\": \"integer\",\n  \"category\": {\n    \"id\": \"integer\",\n    \"name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": \"integer\",\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"enum: available, pending, sold\"\n}",
    "400": "Invalid ID supplied with empty response body",
    "404": "Pet not found with empty response body"
  }
}

*/

// ********RoostGPT********

import test, { expect, request } from "@playwright/test";
import { readCsvData } from "./utility.js";

test("Find pet by ID", async () => {
  const baseURL =  "https://petstore.swagger.io/v2";
  const context = await request.newContext({
    baseURL,
    extraHTTPHeaders: {
      "Content-Type": "application/json",
    },
  });

  const csvFilePath = `/var/tmp/Roost/RoostGPT/roost_test/1732294427/source/my-products/playwrightApiTests/tests/Find_pet_by_ID.csv`
  const testData = await readCsvData(csvFilePath);

  for (let i = 0; i < testData.length; i++) {
    const csvDataRow = testData[i];
    const { statusCode, ...sampleData } = csvDataRow;

    const response = await context.get(`/pet/${sampleData.petId}`);
    expect(response.status()).toBe(statusCode);

    if (response.status() === statusCode) {
      console.log("Response for getPetById is:", await response.json());
    }
  }
})